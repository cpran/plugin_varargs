#! This script is part of the varargs CPrAN plugin for Praat.
#! The latest version is available through CPrAN or at
#! <http://cpran.net/plugins/varargs>
#!
#! The varargs plugin is free software: you can redistribute it
#! and/or modify it under the terms of the GNU General Public
#! License as published by the Free Software Foundation, either
#! version 3 of the License, or (at your option) any later version.
#!
#! The varargs plugin is distributed in the hope that it will be
#! useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#! of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#! GNU General Public License for more details.
#!
#! You should have received a copy of the GNU General Public License
#! along with utils. If not, see <http://www.gnu.org/licenses/>.
#!
#! Copyright 2016 Jose Joaquin Atria

include ../../plugin_utils/procedures/utils.proc

#! ~~~ params
#! in:
#!   .argv$: >
#!     A string that will be parsed exactly like what comes after
#!     the `@` in a procedure call.
#! ~~~
#!
procedure varargs: .argv$
  .base$ = replace_regex$(.argv$, "^\s*([_a-zA-Z0-9\.]+)\s*([:(]?).*", "\1\2", 0)
  .args$ = .argv$ - ")"

  .r$ = right$(.base$)
  if .r$ == "(" or .r$ == ":"
    .base$ = .base$ - .r$
    .args$ = extractLine$(.args$, .r$)
    if .r$ == ":" and .args$ == ""
      exitScript: "Empty formula:" + newline$ +
         ... "« " + .argv$ + " »"
    endif
  else
    .args$ = extractLine$(.args$, " ")
  endif

  @arg: .args$
  @'.base$'()
  if variableExists(.base$ + "." + arg.t$)
    call '.base$'.'arg.t$' 'arg.v$'

  else
    exitScript: "No procedure with that signature:" + newline$ +
      ... "« " + .argv$ + " »"
  endif

  for .i to arg.n
    arg.v$[.i] = ""
  endfor
endproc

#! ~~~ params
#! in:
#!   .in$: A comma-separated argument list (as if to be used with `@`)
#! out:
#!   .n: The number of parsed arguments
#!   .v$: A space-separated argument list (as if to be used with `call`)
#!   .t$: >
#!     The signature of parsed arguments, encoded as a string of "n" (for
#!     numerics) and "s" (for strings) characters, one per parsed argument.
#!     If no arguments were passed, `.t$` will be `nil`.
#!   .v$[]: A list of each individual argument, all of them as strings.
#! ~~~
#!
procedure arg: .in$
  @split: ",", .in$
  for .i to split.length
    .vv$[.i] = split.return$[.i]
  endfor
  .nn = split.length

  # Split argument by commas, and look for arguments that were broken in
  # the process and merge them back together. Merger will leave some
  # indexes empty.
  for .j from 0 to .nn-1
    .merge = 0
    .i = .nn - .j

    @strcount_regex: .vv$[.i], "[[]]"
    if strcount_regex.return mod 2
      .merge = 1
    endif

    @strcount_regex: .vv$[.i], "[()]"
    if strcount_regex.return mod 2
      .merge = 1
    endif

    @strcount_regex: .vv$[.i], """"
    if strcount_regex.return mod 2
      .merge = 1
    endif


    if .merge
      .vv$[.i] = .vv$[.i-1] + "," + .vv$[.i]
      .vv$[.i-1] = ""

      .j -= 1
    endif
  endfor

  .n = 0
  .t$ = ""
  .v$ = ""
  if .nn

    # Process merged arguments by passing them to the internal parser
    # with `nocheck writeInfo`. If this results in the empty string,
    # there was an undefined variable in the argument
    for .i to .nn
      if .vv$[.i] != ""
        .n += 1
        .vv$ = .vv$[.i]
        .vv$ = replace_regex$(.vv$, "^\s+", "", 0)
        .vv$ = replace_regex$(.vv$, "\s+$", "", 0)

        if    index_regex(.vv$, "^\.?[a-z][a-zA-Z0-9.]*\$") or
          ... index_regex(.vv$, "^""")
          .t$ = .t$ + "s"
        else
          .t$ = .t$ + "n"
        endif

        .v$[.n] = nocheck writeInfo: '.vv$'
        if .v$[.n] == ""
          exitScript: "Unknown variable:" + newline$ +
            ... "» " + .vv$ + newline$ +
            ... " found in " + newline$ + "» " + .in$ + " «"
        endif
      endif
    endfor

    # Detect the type per argument. Only strings and numerics supported
    # at this point. How do arrays work?
    if .n
      for .i to .n
        if mid$(.t$, .i, 1) == "s" and .i < .n
          .v$ = .v$ + """" + .v$[.i] + """ "
        else
          .v$ = .v$ + .v$[.i] + " "
        endif
      endfor
      .v$ = .v$ - " "
    else
      .t$ = "nil"
    endif
  endif

  # appendInfoLine: "in$: ", .in$
  # appendInfoLine: "n: ",   .n
  # appendInfoLine: "t$: ",  .t$
  # appendInfoLine: "v$: ",  .v$
endproc
